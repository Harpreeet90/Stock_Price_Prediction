from pandas_datareader import data,wb
import pandas as pd
import numpy as np
import datetime
from matplotlib import pyplot as plt
import seaborn as sns
import cufflinks as cf
import chart_studio.plotly as py  
import plotly.graph_objs as go
%matplotlib inline



start =datetime.datetime(2019,1,1)
end =datetime.datetime(2022,6,1)
HSBC=data.DataReader("HSBC",'yahoo',start,end)
MS=data.DataReader("MS",'yahoo',start,end)
GS=data.DataReader("GS",'yahoo',start,end)
JPM=data.DataReader("JPM",'yahoo',start,end)

BCS=data.DataReader("BCS",'yahoo',start,end)
tickers=['HSBC','MS','GS','JPM']
bank_stocks=pd.concat([ HSBC,MS,GS,JPM] ,axis=1,keys=tickers)
bank_stocks.head()

bank_stocks.columns.names=['Bank Tickers','Stock Info']
bank_stocks.head()
bank_stocks.xs(key='Close',axis=1,level='Stock Info').max()
returns=pd.DataFrame()

for tick in tickers:
    returns[tick+'Return']=bank_stocks[tick]['Close'].pct_change()
    returns.head()
    
    #sns.pairplot(returns[1:])
    returns.idxmin()
    returns.idxmax()
    returns.std()
    returns.loc['2020-01-01':'2022-01-01'].std()
    
    ns.distplot(returns.loc['2020-01-01':'2022-01-01']['MSReturn'],color='green')
    bank_stocks.xs(key='Close',axis=1,level='Stock Info').plot()
    
    #Iplot
from matplotlib import pyplot as plt
import seaborn as sns
sns.set_style('whitegrid')
%matplotlib inline
import plotly
import cufflinks as cf
cf.go_offline()
bank_stocks.xs(key='Close',axis=1,level='Stock Info').iplot()

#Moving averages 
import matplotlib.pyplot as plt
GS['Close'].loc['2020-01-01':'2020-07-01'].rolling(window=30).mean().plot(label='30 day Mov Avg')
GS['Close'].loc['2020-01-01':'2020-07-01'].plot(label='GS Close')
plt.legend()

sns.heatmap(bank_stocks.xs(key='Close',axis=1,level='Stock Info').corr(),annot=True,cmap='viridis')

sns.clustermap(bank_stocks.xs(key='Close',axis=1,level='Stock Info').corr(),annot=True,cmap='viridis')

gs15 = GS[['Open','High','Low','Close']].loc['2020-01-01':'2020-07-01']
gs15.iplot(kind='candle'

GS['Close'].loc['2020-01-01':'2020-07-01'].ta_plot(study='sma',periods=[13,21,55])

GS['Close'].loc['2020-01-01':'2020-07-01'].ta_plot(study='boll')
